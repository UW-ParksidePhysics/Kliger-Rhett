diary on 
%Ex 2.1.1 using elementary functions
a = 5; x = 2; y = 8;
y = exp(-a)*sin(x)+10*sqrt(y);

%Logarithms%
log(142) %Answer is 4.955 for natural log of 142 %

ans =

    4.9558


log10(142) % answer is 2.15 for base 10 log of 142 %

ans =

    2.1523


%Trigonometry%
sin(pi/4) % Answer is 0.7071, MATLAB isn't in radians.

ans =

    0.7071


%Exponentials%
exp(10) %Is e^10 and answer is 2.2026e+04 around 22026 %

ans =

   2.2026e+04

diary off
%Basic Plotting%
x = [1 2 3 4 5 6];
y = [3 -1 2 4 5 1];
plot(x,y) %After plotting, it should show the figure after puttting into command window%

%Plot 2%
x = 0:pi/100:2*pi; %Means it starts at 0, goes in increments of pi/100, and stops at 2*pi%
y = sin(x);
plot(x,y)
xlabel("x = 0:2\pi")
ylabel("Sine of x") %NOTE: there is a lack of semi colons in these because they are labels , NOT COMMANDS
title("Plot of the Sine function")
%After typing into the command line it should show the figure with a title
%and axis lables%

%Plotting multiple graphs in one figure%
x = 0:pi/100:2*pi; %Graphs start at 0 in increments of pi/100 and end at 2*pi%
y1 = 2*cos(x);
y2 = cos(x);
y3 = 0.5*cos(x);
plot(x,y1,"--",x,y2,"-",x,y3,":")
xlabel("0 \leq x \leq 2\pi")
ylabel("Cosine functions")
legend("2*cos(x)","cos(x)","0.5*cos(x)")
title("Typical example of multiple plots")
axis([0 2*pi -3 3]) %Axis for x 0 to 2*pi and y axis limit is -3 to 3%
%Matrices%
%A matrix is a two-dimensionalarray consisting of m rows and n columns. 
%Special cases are column vectors(n= 1) and row vectors(m=1).
%Column vector m x 1 and row vector is n x 1.

%Example of a row vector, displays horizontally%
v = [1 4 7 10 13] %No need for a semi colon here%

v =

     1     4     7    10    13


%Example of a column vector, displays vertically%

w = [1; 4; 7; 10; 13;] % Again no need for semicolon end%

w =

     1
     4
     7
    10
    13


%To turn a row vector to a column vecotr you can use the transpose operator
% which is " ' " (a single quote). See here...

w = v'

w =

     1
     4
     7
    10
    13


%Thus,v(1)is the first element of vectorv,v(2)its second element, and so forth.
%To access first 3 elements of the vector...

v(1:3) %Should display the first 3 elements of said vector

ans =

     1     4     7


v(3:end) %Should display the third element through the last element 7 10 13

ans =

     7    10    13


%Entering a Matrix%

%begin with a square bracket [
%separate elements in a row with spaces or commas (,)
%use a semicolon (;) to separate rows
%end the matrix with another square bracket, ].

%Example
A = [1 2 3; 4 5 6; 7 8 9] %Should display a 3X3 matrix

A =

     1     2     3
     4     5     6
     7     8     9

%Once we have entered the matrix, it is automatically stored and remembered in the Workspace. 
%We can refer to it simply as matrix A. 

%We can locate parts of the matrix with code similar to this...
A(2,1)%Finds element in row 2 and column 1, in our previous matrix it is 4

ans =

     4


%We can also change values in our matrix by indexing. See here...
A(3,3)=0 %It was 9 and now I will make it 0.

A =

     1     2     3
     4     5     6
     7     8     0


%Colon Operator%
%It is used to enter matrices with numbers that would make it too large to
%enter one at a time.

x = 0:0.1:5; %Make a matrix that displays from 0 to 5 in increments of 0.1 (It will have 51 elements).
%Line Spacing%

% y=linspace(a,b)generates a row vector y of 100 points linearly spaced between and including a and b.

% y=linspace(a,b,n)generates a row vector y of n points linearly spaced between and including a and b.

% Typing theta = linspace(0,2*pi,101) into command window 
% divides the interval [0,2ยบ] into 100 equal subintervals, then creating a vector of 101 elements.

A = [1 2 3; 4 5 6; 7 8 9]

A =

     1     2     3
     4     5     6
     7     8     9

A(2,:) %Should output the 2nd row of the matrix: 4 5 6

ans =

     4     5     6

A(:,2:3) %Should ouput the 2 and third columns of the matrix

ans =

     2     3
     5     6
     8     9


%Creating a Sub-Matrix%
%To extract a submatrix B consisting of rows 2 and 3 and columns 1 and 2 of the matrix A, do the following:
B = A([2 3],[1 2]) 

B =

     4     5
     7     8


%To interchange rows 1 and 2 of A, use the vector of row indices together with the colon operator.
C = A([2 1 3],:)

C =

     4     5     6
     1     2     3
     7     8     9


%It is important to note that the colon operator(:) stands forall columns or all rows.

%To create a vector version of matrix A, do the following:
A(:)

ans =

     1
     4
     7
     2
     5
     8
     3
     6
     9


%Deleting a Row or Column%
%To delete a row you can use the following format:

A(3,:) = [] %This will delete the third row in the matrix A so 7 8 and 9 will be gone.

A =

     1     2     3
     4     5     6


%To restore the third row you can use the following format:

A = [A(1,:);A(2,:);[7 8 9]]

A =

     1     2     3
     4     5     6
     7     8     9


%Dimensions%
%to determine the dimensions of a matrix type the following format into the command:

% size(A) it show show the dimensions are 3
%[m,n]=size(A) show the answer more explicitly

%Transposing a Matrix%

%Type A' into the command window and it will make things transposed
%Basically puts rows as columns

%Concatinating Matrices

B = [A 10*A; -A [1 0 0; 0 1 0; 0 0 1]]

B =

     1     2     3    10    20    30
     4     5     6    40    50    60
     7     8     9    70    80    90
    -1    -2    -3     1     0     0
    -4    -5    -6     0     1     0
    -7    -8    -9     0     0     1

%Gaussian Function Plot%
%Let s be the sigma representing the standard deviations
%Let m be the mean of 5 for all values
%f = gauss_distribution(x, mu, s)
mu = 5; %Mean is denoted by mu and is 5 for all graphs
x = 0:1:10; % x is labeled between 0 and 10 in increments of 1
s1 = 0.5; %Standard deviation s1
s2 = 1.0; %Standard deviation s2
s3 = 1.5; %Standard deviation s3
p11 = -0.5 * ((x - mu)/s1) .^ 2;
p21 = (s1 * sqrt(2*pi));
f1 = exp(p11) ./ p21; %Gaussian function with s1
p12 = -0.5 * ((x - mu)/s2) .^ 2;
p22 = (s2 * sqrt(2*pi));
f2 = exp(p12) ./ p22; %Gaussian function with s2
p13 = -0.5 * ((x - mu)/s3) .^ 2;
p23 = (s3 * sqrt(2*pi));
f3 = exp(p13) ./ p23; %Gaussian functionj with s3

plot(x,f1,"-b",x,f2,"--g",x,f3,":k") %Plot all functions on the same graph makes first blue, second green, third black (the k).
xlabel("x") %Labels and titles in this section
ylabel("f(x-5,s)")
title("Gaussian Function")
legend("f1", "f2", "f3")
axis([0 10 0 1]) %Axis should be 0 to 10 for x and 0 to 1 for y

%OUTCOME: PENDING SUCCESS%
%Create 5X5 Matrix%
%8 = 1/(2*(1/4)^2)
H = 8*[2 1 0 0 0; 1 2 1 0 0; 0 1 2 1 0; 0 0 1 2 1; 0 0 0 1 2]

H =

    16     8     0     0     0
     8    16     8     0     0
     0     8    16     8     0
     0     0     8    16     8
     0     0     0     8    16

e = eig(H)

e =

    2.1436
    8.0000
   16.0000
   24.0000
   29.8564

%Then plot the fifth eigenvector as the y-values against xvalues = linspace(1/(5+1), 5/(5+1), 5)
[V,D] = eig(H) %V is eigenvector and D is eigenvalue.

V =

    0.2887   -0.5000    0.5774    0.5000   -0.2887
   -0.5000    0.5000   -0.0000    0.5000   -0.5000
    0.5774    0.0000   -0.5774   -0.0000   -0.5774
   -0.5000   -0.5000   -0.0000   -0.5000   -0.5000
    0.2887    0.5000    0.5774   -0.5000   -0.2887


D =

    2.1436         0         0         0         0
         0    8.0000         0         0         0
         0         0   16.0000         0         0
         0         0         0   24.0000         0
         0         0         0         0   29.8564

V(:,5) %Ouputs 5th column in eigenvectors

ans =

   -0.2887
   -0.5000
   -0.5774
   -0.5000
   -0.2887

yvalues = V(:,5) %Ouputs y value as 5th coulumn in eigenvectors

yvalues =

   -0.2887
   -0.5000
   -0.5774
   -0.5000
   -0.2887

xvalues = linspace(1/(5+1), 5/(5+1), 5) %Sets xvalue equivalent to the linespace here which promts 

xvalues =

    0.1667    0.3333    0.5000    0.6667    0.8333

                                         %for line on x axis that goes from
                                         %1/6 to 5/6 with 5 subjects.


%I will need to tranpose the y values so they are in the same format as the
%xvalues.
transpose(yvalues) %Makes y values displayed horizontally, transpose isn't command, ";" not needed.

ans =

   -0.2887   -0.5000   -0.5774   -0.5000   -0.2887

% I still need to plot sqrt(2)*(pi*x) and x on range 0 to 1.
x1 = 0:0.1:1;%x for the eigenvector plot is in increments of 0.1 from 0 to 1, I will do the same for these values.
y1 = ((sqrt(2))*(pi*x1));
plot(xvalues, yvalues,"--", x1,y1,"-")%The line with the quotes indicate that the lines in the plot will be different."--" for dashed lines, and "-" for solid.
xlabel("Values of x from 0 to 1")
ylabel("yvalues")
title("xvalues agianst yvalues")
diary off
diary on
%Plotting the 10X10 Matrix%
N = 10

N =

    10

A = 2*eye(N)

A =

     2     0     0     0     0     0     0     0     0     0
     0     2     0     0     0     0     0     0     0     0
     0     0     2     0     0     0     0     0     0     0
     0     0     0     2     0     0     0     0     0     0
     0     0     0     0     2     0     0     0     0     0
     0     0     0     0     0     2     0     0     0     0
     0     0     0     0     0     0     2     0     0     0
     0     0     0     0     0     0     0     2     0     0
     0     0     0     0     0     0     0     0     2     0
     0     0     0     0     0     0     0     0     0     2

B = [zeros(N-1,1) eye(N-1) ; zeros(1,N)]

B =

     0     1     0     0     0     0     0     0     0     0
     0     0     1     0     0     0     0     0     0     0
     0     0     0     1     0     0     0     0     0     0
     0     0     0     0     1     0     0     0     0     0
     0     0     0     0     0     1     0     0     0     0
     0     0     0     0     0     0     1     0     0     0
     0     0     0     0     0     0     0     1     0     0
     0     0     0     0     0     0     0     0     1     0
     0     0     0     0     0     0     0     0     0     1
     0     0     0     0     0     0     0     0     0     0

C = [zeros(1,N); eye(N-1) zeros(N-1,1)]

C =

     0     0     0     0     0     0     0     0     0     0
     1     0     0     0     0     0     0     0     0     0
     0     1     0     0     0     0     0     0     0     0
     0     0     1     0     0     0     0     0     0     0
     0     0     0     1     0     0     0     0     0     0
     0     0     0     0     1     0     0     0     0     0
     0     0     0     0     0     1     0     0     0     0
     0     0     0     0     0     0     1     0     0     0
     0     0     0     0     0     0     0     1     0     0
     0     0     0     0     0     0     0     0     1     0


H = [(1/(2*(1/(N-1)^2))*(A + B + C))]

H =

   81.0000   40.5000         0         0         0         0         0         0         0         0
   40.5000   81.0000   40.5000         0         0         0         0         0         0         0
         0   40.5000   81.0000   40.5000         0         0         0         0         0         0
         0         0   40.5000   81.0000   40.5000         0         0         0         0         0
         0         0         0   40.5000   81.0000   40.5000         0         0         0         0
         0         0         0         0   40.5000   81.0000   40.5000         0         0         0
         0         0         0         0         0   40.5000   81.0000   40.5000         0         0
         0         0         0         0         0         0   40.5000   81.0000   40.5000         0
         0         0         0         0         0         0         0   40.5000   81.0000   40.5000
         0         0         0         0         0         0         0         0   40.5000   81.0000


[V,D] = eig(H)

V =

   -0.1201   -0.2305   -0.3223   -0.3879    0.4221    0.4221    0.3879    0.3223   -0.2305    0.1201
    0.2305    0.3879    0.4221    0.3223   -0.1201    0.1201    0.3223    0.4221   -0.3879    0.2305
   -0.3223   -0.4221   -0.2305    0.1201   -0.3879   -0.3879   -0.1201    0.2305   -0.4221    0.3223
    0.3879    0.3223   -0.1201   -0.4221    0.2305   -0.2305   -0.4221   -0.1201   -0.3223    0.3879
   -0.4221   -0.1201    0.3879    0.2305    0.3223    0.3223   -0.2305   -0.3879   -0.1201    0.4221
    0.4221   -0.1201   -0.3879    0.2305   -0.3223    0.3223    0.2305   -0.3879    0.1201    0.4221
   -0.3879    0.3223    0.1201   -0.4221   -0.2305   -0.2305    0.4221   -0.1201    0.3223    0.3879
    0.3223   -0.4221    0.2305    0.1201    0.3879   -0.3879    0.1201    0.2305    0.4221    0.3223
   -0.2305    0.3879   -0.4221    0.3223    0.1201    0.1201   -0.3223    0.4221    0.3879    0.2305
    0.1201   -0.2305    0.3223   -0.3879   -0.4221    0.4221   -0.3879    0.3223    0.2305    0.1201


D =

    3.2811         0         0         0         0         0         0         0         0         0
         0   12.8585         0         0         0         0         0         0         0         0
         0         0   27.9563         0         0         0         0         0         0         0
         0         0         0   47.3514         0         0         0         0         0         0
         0         0         0         0   69.4725         0         0         0         0         0
         0         0         0         0         0   92.5275         0         0         0         0
         0         0         0         0         0         0  114.6486         0         0         0
         0         0         0         0         0         0         0  134.0437         0         0
         0         0         0         0         0         0         0         0  149.1415         0
         0         0         0         0         0         0         0         0         0  158.7189


yvalues = V(:,N) %Ouputs y value as 5th coulumn in eigenvectors

yvalues =

    0.1201
    0.2305
    0.3223
    0.3879
    0.4221
    0.4221
    0.3879
    0.3223
    0.2305
    0.1201

xvalues = linspace(1/(N+1), 10/(N+1), N)

xvalues =

    0.0909    0.1818    0.2727    0.3636    0.4545    0.5455    0.6364    0.7273    0.8182    0.9091

transpose(yvalues)

ans =

    0.1201    0.2305    0.3223    0.3879    0.4221    0.4221    0.3879    0.3223    0.2305    0.1201

x1 = 0:0.1:1;%x for the eigenvector plot is in increments of 0.1 from 0 to 1, I will do the same for these values.
y1 = ((sqrt(2))*(pi*x1));
plot(xvalues, yvalues,"--", x1,y1,"-")%The line with the quotes indicate that the lines in the plot will be different."--" for dashed lines, and "-" for solid.
xlabel("Values of x from 0 to 1")
ylabel("yvalues")
title("xvalues agianst yvalues")
diary off
